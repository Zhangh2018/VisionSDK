##############################################################################
#
#  Freescale Semiconductor, Inc.
#  (c) Copyright 2011, Freescale Semiconductor, Inc.
#  ALL RIGHTS RESERVED.
#
##############################################################################
#
#  CONTENT
#
#
#  AUTHOR
#    Stefan Schwarz
#
#  DATE
#    2013-08-05
#
#  LANGUAGE
#    make
#
##############################################################################
ifeq ($(ACL_GENERATE_MD),"on")

SRCS_CL := $(addprefix ../src/, $(ACL_LIB_SRCS))


all:: $(SRCS_CL)
	@rm -f $(addsuffix .*.temp, $(SRCS_CL)) 


.PHONY: $(SRCS_CL) 
$(SRCS_CL): % : PREPROCESS%
	@echo "Generating _md_config.cpp file..."
	@$(eval SRC_CL:=$@)
	@$(eval KERNEL:=$(shell cat $(SRC_CL).5_KernelFunctionName.temp))
	@$(eval SRC_CPP:= $(dir $(SRC_CL))$(KERNEL)_md_config.cpp)
	@$(eval KERNEL_NUMBER:=$(shell wc -l < $(SRC_CL).6_KernelFunctionParameters.temp))
	@$(eval ADDRESS_SPACE:=$(shell awk -f $(SDK_ROOT)/build/nbuild/scripts/ConvertParamsToOpenClAddressSpaceQualifier.awk $(SRC_CL).6_KernelFunctionParameters.temp | tr -s '\n' ','))
	@echo "//////////////////////////////////////////////////////////////////////////////////"  > $(SRC_CPP)
	@echo "//  (C) Copyright CogniVue Corporation. 2014 All rights reserved."                   >> $(SRC_CPP)
	@echo "//"                                                                                  >> $(SRC_CPP)
	@echo "//  Confidential Information"                                                        >> $(SRC_CPP)
	@echo "//"                                                                                  >> $(SRC_CPP)
	@echo "//  All parts of the CogniVue software and documentation are confidential and"       >> $(SRC_CPP)
	@echo "//  proprietary to CogniVue Corp."                                                   >> $(SRC_CPP)
	@echo "//  This file may not, in whole or in part, be copied, photocopied,"                 >> $(SRC_CPP)
	@echo "//  reproduced, translated, or reduced to any electronic medium or machine"          >> $(SRC_CPP)
	@echo "//  readable form without prior consent, in writing, from CogniVue."                 >> $(SRC_CPP)
	@echo "//////////////////////////////////////////////////////////////////////////////////"  >> $(SRC_CPP)
	@echo ""                                                                                    >> $(SRC_CPP)
	@echo ""                                                                                    >> $(SRC_CPP)
	@echo "// KERNEL WRAPPER DECL (Implementation generated by Compiler)"                       >> $(SRC_CPP)
	@echo "int "$(KERNEL)"__3 (  int nxt,"                                                      >> $(SRC_CPP)
	@echo "                      vuint _vec_wx, vuint _vec_wy, size_t wz,"                      >> $(SRC_CPP)
	@echo "                      const _cl_runtime* rt,"                                        >> $(SRC_CPP)
	@echo "                      void chess_storage(DMb)*,"                                     >> $(SRC_CPP)
	@echo "                      void chess_storage(VMb)*);"                                    >> $(SRC_CPP)
	@echo "// KERNEL CONTEXT SIZE DATA STRUCT (generated by Compiler)"                          >> $(SRC_CPP)
	@echo "extern int  "$(KERNEL)"__3__md[];"                                                   >> $(SRC_CPP)
	@echo ""                                                                                    >> $(SRC_CPP)
	@echo "// SET ARGUMENT FUNCTION DECL"                                                       >> $(SRC_CPP)
	@echo "void "$(KERNEL)"__3__set(void chess_storage(DMb)* ctx, cl_argument* args);"          >> $(SRC_CPP)
	@echo ""                                                                                    >> $(SRC_CPP)
	@echo ""                                                                                    >> $(SRC_CPP)
	@echo "// KERNEL METADATA"                                                                  >> $(SRC_CPP)
	@echo "CL_KRNL_MD "$(KERNEL)"_md = "                                                        >> $(SRC_CPP)
	@echo "{"                                                                                   >> $(SRC_CPP)
	@echo "   0,0,0,0,                   // required wg size"                                   >> $(SRC_CPP)
	@echo "   "$(KERNEL_NUMBER)",        // number of arguments"                                >> $(SRC_CPP)
	@echo "   3,                         // kernel mode"                                        >> $(SRC_CPP)
	@echo "   "$(ADDRESS_SPACE)"           // arg addr space type"                              >> $(SRC_CPP)
	@echo "   0,0,0,0,0,0,0,0,           // arg access type"                                    >> $(SRC_CPP)
	@echo "   "$(KERNEL)"__3__md,"                                                              >> $(SRC_CPP)
	@echo "   (int32_t)(&"$(KERNEL)"__3),"                                                      >> $(SRC_CPP)
	@echo "   (int32_t)(&"$(KERNEL)"__3__set),"                                                 >> $(SRC_CPP)
	@echo ""                                                                                    >> $(SRC_CPP)
	@echo "};"                                                                                  >> $(SRC_CPP)
	@echo ""                                                                                    >> $(SRC_CPP)
	@echo ""                                                                                    >> $(SRC_CPP)
	@echo "// KERNEL SET ARGUMENT FUNCTION"                                                     >> $(SRC_CPP)
	@echo "void "$(KERNEL)"__3__set(void chess_storage(DMb)* ctx, cl_argument* args) {"         >> $(SRC_CPP)
	@echo "    char chess_storage(DMb)* p = (char chess_storage(DMb)*)ctx;"                     >> $(SRC_CPP)
	@cat $(SRC_CL).8_KernelAddFunctions.temp                                                    >> $(SRC_CPP)
	@echo "}"                                                                                   >> $(SRC_CPP)
	@echo ""                                                                                    >> $(SRC_CPP)



PREPROCESS_SRCS_CL:=$(addprefix PREPROCESS, $(SRCS_CL))


.PHONY: $(PREPROCESS_SRCS_CL)
$(PREPROCESS_SRCS_CL):
	@$(eval SRC_CL:=$(subst PREPROCESS,,$@))
	@echo $(SRC_CL)
ifneq (,$(findstring CYGWIN,$(shell uname -s)))
	@chesscc -c -p APU2 -E $(shell cygpath -am $(SRC_CL)) > $(SRC_CL).1_ChessccPreprocess.temp
else
	@chesscc -c -p APU2 -E $(abspath $(SRC_CL)) > $(SRC_CL).1_ChessccPreprocess.temp
endif
	@sed '/^#/ d' $(SRC_CL).1_ChessccPreprocess.temp > $(SRC_CL).2_NoComments.temp
	@tr '\n' ' ' < $(SRC_CL).2_NoComments.temp > $(SRC_CL).3_SingleLine.temp
	@sed -e "s/__attribute__[^)]*)\+//" $(SRC_CL).3_SingleLine.temp | grep -o -E '__kernel[ \t]+void[^\)]+\)' | tr -s ' ' > $(SRC_CL).4_KernelFunctionSignature.temp
	@sed -n -e 's/__kernel[ \t]\+void[ \t]\+\(\w\+\)[ \t]*(.*/\1/p' $(SRC_CL).4_KernelFunctionSignature.temp > $(SRC_CL).5_KernelFunctionName.temp
	@sed -n -e 's/__kernel[ \t]\+void[ \t]\+\w\+[ \t]*(\(.*\)).*/\1/p' $(SRC_CL).4_KernelFunctionSignature.temp | tr -s ' ' | tr -s ',' '\n' > $(SRC_CL).6_KernelFunctionParameters.temp
	@sed -e "s/[^ \t\*]*$$//" $(SRC_CL).6_KernelFunctionParameters.temp | sed -e "s/const\s*//" -e "s/__global//" -e "s/__local//" -e "s/__constant//" -e"s/__private//" | tr -d ' ' > $(SRC_CL).7_KernelFunctionParameterTypes.temp
	@awk -f $(SDK_ROOT)/build/nbuild/scripts/ConvertParamsToKernelAddFunctions.awk $(SRC_CL).7_KernelFunctionParameterTypes.temp > $(SRC_CL).8_KernelAddFunctions.temp

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
else
all::
endif