// ISP Graph "isp_hdr_ddr"
Import "../../../inc/ipus_mem_map.h";
Import "../inc/iofiles.h";
GraphLimits.NumLines = NUM_OUT_LINES;
		
Node ToneHDR {
	VECTOR,
	3,
	NUM_IN_LINES
};
Param ToneHDR {
    { D_IPUS_SYN_HOST_XCFG_OFF, (1288 << 16) | 0x0 },
    { D_IPUS_SYN_HOST_INACFG_OFF, 0x00000700 },
    { D_IPUS_SYN_HOST_OUTCFG_OFF, 0x00000100 },
    { D_IPUS_SYN_S_CH0_CFG_INA_OFF, 0x00058000 },
    { D_IPUS_SYN_S_CH1_CFG_INA_OFF, 0x00058000 },
    { D_IPUS_SYN_S_CH2_CFG_INA_OFF, 0x00350080 },
    { D_IPUS_SYN_S_CH0_CFG_OUT_OFF, 0x00000000 },
};


	Load ToneHDR {
	tonehdr
	};



Node ConvertOut {
	SCALAR,
	0,
	NUM_OUT_LINES
};
Param ConvertOut {
    { D_IPUS_SYN_HOST_XCFG_OFF, (2560 << 16) | 0x1 },
    { D_IPUS_SYN_HOST_INACFG_OFF, 0x00000700 },
    { D_IPUS_SYN_HOST_OUTCFG_OFF, 0x00000100 },
    { D_IPUS_SYN_S_CH0_CFG_INA_OFF, 0x00054000 },
    { D_IPUS_SYN_S_CH1_CFG_INA_OFF, 0x00054000 },
    { D_IPUS_SYN_S_CH2_CFG_INA_OFF, 0x00054000 },
    { D_IPUS_SYN_S_CH0_CFG_OUT_OFF, 0x10000000 },
};


	Load ConvertOut {
	yuv444touyvy
	};



Node ChGain_Exposure {
	SCALAR,
	1,
	NUM_IN_LINES
};
Param ChGain_Exposure {
    { D_IPUS_SYN_HOST_XCFG_OFF, (1288 << 16) | 0x1 },
    { D_IPUS_SYN_HOST_INACFG_OFF, 0x00000300 },
    { D_IPUS_SYN_HOST_OUTCFG_OFF, 0x00000300 },
    { D_IPUS_SYN_S_CH0_CFG_INA_OFF, 0x00058000 },
    { D_IPUS_SYN_S_CH1_CFG_INA_OFF, 0x00058000 },
    { D_IPUS_SYN_S_CH0_CFG_OUT_OFF, 0x00000000 },
    { D_IPUS_SYN_S_CH1_CFG_OUT_OFF, 0x00000000 },
};


	Load ChGain_Exposure {
	exposure
	};



Node Debayer_G {
	SCALAR,
	2,
	NUM_IN_M4
};
Param Debayer_G {
    { D_IPUS_SYN_HOST_XCFG_OFF, (1286 << 16) | 0x1},
    { D_IPUS_SYN_HOST_INACFG_OFF, 0x00000700 },
    { D_IPUS_SYN_HOST_OUTCFG_OFF, 0x00000300 },
    { D_IPUS_SYN_S_CH0_CFG_INA_OFF, 0x00058000 },
    { D_IPUS_SYN_S_CH1_CFG_INA_OFF, 0x00058000 },
    { D_IPUS_SYN_S_CH2_CFG_INA_OFF, 0x00058000 },
    { D_IPUS_SYN_S_CH0_CFG_OUT_OFF, 0x00000000 },
    { D_IPUS_SYN_S_CH1_CFG_OUT_OFF, 0x00010000 },
};


	Load Debayer_G {
	debayer_g
	};



Node Debayer_BR {
	SCALAR,
	5,
	NUM_IN_M8
};
Param Debayer_BR {
    { D_IPUS_SYN_HOST_XCFG_OFF, (1284 << 16) | 0x1},
    { D_IPUS_SYN_HOST_INACFG_OFF, 0x00000700 },
    { D_IPUS_SYN_HOST_INBCFG_OFF, 0x00000700 },
    { D_IPUS_SYN_HOST_OUTCFG_OFF, 0x00000700 },
    { D_IPUS_SYN_S_CH0_CFG_INA_OFF, 0x00098000 },
    { D_IPUS_SYN_S_CH1_CFG_INA_OFF, 0x00098000 },
    { D_IPUS_SYN_S_CH2_CFG_INA_OFF, 0x00098000 },
    { D_IPUS_SYN_S_CH0_CFG_INB_OFF, 0x00058000 },
    { D_IPUS_SYN_S_CH1_CFG_INB_OFF, 0x00058000 },
    { D_IPUS_SYN_S_CH2_CFG_INB_OFF, 0x00058000 },
    { D_IPUS_SYN_S_CH0_CFG_OUT_OFF, 0x00000000 },
    { D_IPUS_SYN_S_CH1_CFG_OUT_OFF, 0x00000000 },
    { D_IPUS_SYN_S_CH2_CFG_OUT_OFF, 0x00000000 },
};


	Load Debayer_BR {
	debayer_br
	};



Node RGB_2_YUV {
	VECTOR,
	1,
	NUM_IN_M8
};
Param RGB_2_YUV {
    { D_IPUS_SYN_HOST_XCFG_OFF, (1284<< 16) | 0x0 },
    { D_IPUS_SYN_HOST_INACFG_OFF, 0x00000700 },
    { D_IPUS_SYN_HOST_OUTCFG_OFF, 0x00000700 },
    { D_IPUS_SYN_S_CH0_CFG_INA_OFF, 0x00054000 },
    { D_IPUS_SYN_S_CH1_CFG_INA_OFF, 0x00058000 },
    { D_IPUS_SYN_S_CH2_CFG_INA_OFF, 0x00054000 },
    { D_IPUS_SYN_S_CH0_CFG_OUT_OFF, 0x00000000 },
    { D_IPUS_SYN_S_CH1_CFG_OUT_OFF, 0x00000000 },
    { D_IPUS_SYN_S_CH2_CFG_OUT_OFF, 0x00000000 },
};


	Load RGB_2_YUV {
	rgb2yuv
	};



Node Gamma {
	SCALAR,
	3,
	NUM_IN_M8
};
Param Gamma {
    { D_IPUS_SYN_HOST_XCFG_OFF, (1280 << 16) | 0x1 },
    { D_IPUS_SYN_HOST_INACFG_OFF, 0x00000100 },
    { D_IPUS_SYN_HOST_OUTCFG_OFF, 0x00000100 },
    { D_IPUS_SYN_S_CH0_CFG_INA_OFF, 0x00054000 },
    { D_IPUS_SYN_S_CH0_CFG_OUT_OFF, 0x00000000 },
};


	Load Gamma {
	gamma
	};


		Node FastDMA {
			FDMA,
			0
		};
	
	

		
		
		Buffer ConvertOut_Buffer_0 {
			ConvertOut.out[0],
	GENERIC_8,
	2560,
	16,
	2560,
	1
		};
		
		ConvertOut_Buffer_0.readPixels = 2560;
		
		
			Input FDMA_TO_DDR = FastDMA.A[0];
			  FDMA_TO_DDR.firstLine = 0;
			  FDMA_TO_DDR.increment = 1;
			
			Connect {
				ConvertOut_Buffer_0,
				FDMA_TO_DDR,
				1};

	DDRBuffer FastDMA_Buffer_0 {
		FastDMA.out[0],
	GENERIC_8,
	2560,
	NUM_OUT_LINES,
	3840,
	1
	};
	
		FastDMA_Buffer_0.readPixels = 2560;
	
		
	Connect { FastDMA_Buffer_0, DDR, 0 };
	

		
		
		

		
		
		DDRBuffer producerless_buffer_1 {
			null,
	GENERIC_16,
	1296,
	NUM_IN_LINES,
	2592,
	1
		};
		
		
			Input FDMA_LONG_TO_SRAM = FastDMA.A[1];
			  FDMA_LONG_TO_SRAM.firstLine = 0;
			  FDMA_LONG_TO_SRAM.increment = 1;
			
			Connect {
				producerless_buffer_1,
				FDMA_LONG_TO_SRAM,
				1};

	Buffer FastDMA_Buffer_1 {
		FastDMA.out[1],
	GENERIC_16,
	1296,
	16,
	2592,
	1
	};
	
		FastDMA_Buffer_1.readPixels = 2592;
	
	Input ChGain_Exposure_A_0 = ChGain_Exposure.A[0];
	  ChGain_Exposure_A_0.firstLine = 0;
	  ChGain_Exposure_A_0.pixels = 1296;
	  ChGain_Exposure_A_0.lineSkip = 0;
	  ChGain_Exposure_A_0.increment = 1;
	  ChGain_Exposure_A_0.pixelSkip = 0;
	  ChGain_Exposure_A_0.type = GENERIC_16;
		
		
Connect {
  FastDMA_Buffer_1, 
  ChGain_Exposure_A_0,
  1};
	

		
		

		
		
		Buffer ToneHDR_Buffer_0 {
			ToneHDR.out[0],
	GENERIC_16,
	1288,
	16,
	2576,
	1
		};
		
		ToneHDR_Buffer_0.readPixels = 1288;
		
	Input Debayer_G_A_0 = Debayer_G.A[0];
	  Debayer_G_A_0.firstLine = 0;
	  Debayer_G_A_0.pixels = 1288;
	  Debayer_G_A_0.lineSkip = 0;
	  Debayer_G_A_0.increment = 1;
	  Debayer_G_A_0.pixelSkip = 0;
	  Debayer_G_A_0.type = GENERIC_16;
		
		
Connect {
  ToneHDR_Buffer_0, 
  Debayer_G_A_0,
  1};
	Input Debayer_G_A_1 = Debayer_G.A[1];
	  Debayer_G_A_1.firstLine = 1;
	  Debayer_G_A_1.pixels = 1288;
	  Debayer_G_A_1.lineSkip = 0;
	  Debayer_G_A_1.increment = 1;
	  Debayer_G_A_1.pixelSkip = 0;
	  Debayer_G_A_1.type = GENERIC_16;
		
		
Connect {
  ToneHDR_Buffer_0, 
  Debayer_G_A_1,
  2};
	Input Debayer_G_A_2 = Debayer_G.A[2];
	  Debayer_G_A_2.firstLine = 2;
	  Debayer_G_A_2.pixels = 1288;
	  Debayer_G_A_2.lineSkip = 0;
	  Debayer_G_A_2.increment = 1;
	  Debayer_G_A_2.pixelSkip = 0;
	  Debayer_G_A_2.type = GENERIC_16;
		
		
Connect {
  ToneHDR_Buffer_0, 
  Debayer_G_A_2,
  3};
		

		
		
		DDRBuffer producerless_buffer_2 {
			null,
	GENERIC_16,
	1296,
	NUM_IN_LINES,
	2592,
	1
		};
		
		
			Input FDMA_SHORT_TO_SRAM = FastDMA.A[2];
			  FDMA_SHORT_TO_SRAM.firstLine = 0;
			  FDMA_SHORT_TO_SRAM.increment = 1;
			
			Connect {
				producerless_buffer_2,
				FDMA_SHORT_TO_SRAM,
				1};

	Buffer FastDMA_Buffer_2 {
		FastDMA.out[2],
	GENERIC_16,
	1296,
	16,
	2592,
	1
	};
	
		FastDMA_Buffer_2.readPixels = 2592;
	
	Input ChGain_Exposure_A_1 = ChGain_Exposure.A[1];
	  ChGain_Exposure_A_1.firstLine = 0;
	  ChGain_Exposure_A_1.pixels = 1296;
	  ChGain_Exposure_A_1.lineSkip = 0;
	  ChGain_Exposure_A_1.increment = 1;
	  ChGain_Exposure_A_1.pixelSkip = 0;
	  ChGain_Exposure_A_1.type = GENERIC_16;
		
		
Connect {
  FastDMA_Buffer_2, 
  ChGain_Exposure_A_1,
  1};
	

		
		
	

		
		
		Buffer ChGain_Exposure_Buffer_0 {
			ChGain_Exposure.out[0],
	GENERIC_16,
	1288,
	16,
	2576,
	1
		};
		
		ChGain_Exposure_Buffer_0.readPixels = 1288;
		
	Input ToneHDR_A_0 = ToneHDR.A[0];
	  ToneHDR_A_0.firstLine = 0;
	  ToneHDR_A_0.pixels = 1288;
	  ToneHDR_A_0.lineSkip = 0;
	  ToneHDR_A_0.increment = 1;
	  ToneHDR_A_0.pixelSkip = 0;
	  ToneHDR_A_0.type = GENERIC_16;
		
		
Connect {
  ChGain_Exposure_Buffer_0, 
  ToneHDR_A_0,
  1};
		

		
		

		
		
		Buffer ChGain_Exposure_Buffer_1 {
			ChGain_Exposure.out[1],
	GENERIC_16,
	1288,
	16,
	2576,
	1
		};
		
		ChGain_Exposure_Buffer_1.readPixels = 1288;
		
	Input ToneHDR_A_1 = ToneHDR.A[1];
	  ToneHDR_A_1.firstLine = 0;
	  ToneHDR_A_1.pixels = 1288;
	  ToneHDR_A_1.lineSkip = 0;
	  ToneHDR_A_1.increment = 1;
	  ToneHDR_A_1.pixelSkip = 0;
	  ToneHDR_A_1.type = GENERIC_16;
		
		
Connect {
  ChGain_Exposure_Buffer_1, 
  ToneHDR_A_1,
  1};
		

		
		

		
		
		Buffer Debayer_G_Buffer_0 {
			Debayer_G.out[0],
	GENERIC_16,
	1286,
	16,
	2576,
	1
		};
		
		Debayer_G_Buffer_0.readPixels = 1286;
		
	Input Debayer_BR_B_0 = Debayer_BR.B[0];
	  Debayer_BR_B_0.firstLine = 1;
	  Debayer_BR_B_0.pixels = 1286;
	  Debayer_BR_B_0.lineSkip = 0;
	  Debayer_BR_B_0.increment = 1;
	  Debayer_BR_B_0.pixelSkip = 0;
	  Debayer_BR_B_0.type = GENERIC_16;
		
		
Connect {
  Debayer_G_Buffer_0, 
  Debayer_BR_B_0,
  2};
	Input Debayer_BR_B_1 = Debayer_BR.B[1];
	  Debayer_BR_B_1.firstLine = 2;
	  Debayer_BR_B_1.pixels = 1286;
	  Debayer_BR_B_1.lineSkip = 0;
	  Debayer_BR_B_1.increment = 1;
	  Debayer_BR_B_1.pixelSkip = 0;
	  Debayer_BR_B_1.type = GENERIC_16;
		
		
Connect {
  Debayer_G_Buffer_0, 
  Debayer_BR_B_1,
  2};
	Input Debayer_BR_B_2 = Debayer_BR.B[2];
	  Debayer_BR_B_2.firstLine = 2;
	  Debayer_BR_B_2.pixels = 1286;
	  Debayer_BR_B_2.lineSkip = 0;
	  Debayer_BR_B_2.increment = 1;
	  Debayer_BR_B_2.pixelSkip = 0;
	  Debayer_BR_B_2.type = GENERIC_16;
		
		
Connect {
  Debayer_G_Buffer_0, 
  Debayer_BR_B_2,
  3};
		

		
		

		
		
		Buffer Debayer_G_Buffer_1 {
			Debayer_G.out[1],
	GENERIC_16,
	643,
	16,
	1288,
	1
		};
		
		Debayer_G_Buffer_1.readPixels = 1286;
		
	Input Debayer_BR_A_0 = Debayer_BR.A[0];
	  Debayer_BR_A_0.firstLine = 0;
	  Debayer_BR_A_0.pixels = 643;
	  Debayer_BR_A_0.lineSkip = 0;
	  Debayer_BR_A_0.increment = 1;
	  Debayer_BR_A_0.pixelSkip = 0;
	  Debayer_BR_A_0.type = GENERIC_16;
		
		
Connect {
  Debayer_G_Buffer_1, 
  Debayer_BR_A_0,
  1};
	Input Debayer_BR_A_1 = Debayer_BR.A[1];
	  Debayer_BR_A_1.firstLine = 1;
	  Debayer_BR_A_1.pixels = 643;
	  Debayer_BR_A_1.lineSkip = 0;
	  Debayer_BR_A_1.increment = 1;
	  Debayer_BR_A_1.pixelSkip = 0;
	  Debayer_BR_A_1.type = GENERIC_16;
		
		
Connect {
  Debayer_G_Buffer_1, 
  Debayer_BR_A_1,
  2};
	Input Debayer_BR_A_2 = Debayer_BR.A[2];
	  Debayer_BR_A_2.firstLine = 2;
	  Debayer_BR_A_2.pixels = 643;
	  Debayer_BR_A_2.lineSkip = 0;
	  Debayer_BR_A_2.increment = 1;
	  Debayer_BR_A_2.pixelSkip = 0;
	  Debayer_BR_A_2.type = GENERIC_16;
		
		
Connect {
  Debayer_G_Buffer_1, 
  Debayer_BR_A_2,
  3};
		

		
		

		
		
		Buffer Debayer_BR_Buffer_2 {
			Debayer_BR.out[2],
	GENERIC_16,
	1284,
	16,
	2568,
	1
		};
		
		Debayer_BR_Buffer_2.readPixels = 1284;
		
	Input RGB_2_YUV_A_1 = RGB_2_YUV.A[1];
	  RGB_2_YUV_A_1.firstLine = 0;
	  RGB_2_YUV_A_1.pixels = 1280;
	  RGB_2_YUV_A_1.lineSkip = 0;
	  RGB_2_YUV_A_1.increment = 1;
	  RGB_2_YUV_A_1.pixelSkip = 0;
	  RGB_2_YUV_A_1.type = GENERIC_16;
		
		
Connect {
  Debayer_BR_Buffer_2, 
  RGB_2_YUV_A_1,
  1};
		

		
		

		
		
		Buffer Debayer_BR_Buffer_1 {
			Debayer_BR.out[1],
	GENERIC_16,
	1284,
	16,
	2568,
	1
		};
		
		Debayer_BR_Buffer_1.readPixels = 1284;
		
	Input RGB_2_YUV_A_2 = RGB_2_YUV.A[2];
	  RGB_2_YUV_A_2.firstLine = 0;
	  RGB_2_YUV_A_2.pixels = 1280;
	  RGB_2_YUV_A_2.lineSkip = 0;
	  RGB_2_YUV_A_2.increment = 1;
	  RGB_2_YUV_A_2.pixelSkip = 0;
	  RGB_2_YUV_A_2.type = GENERIC_16;
		
		
Connect {
  Debayer_BR_Buffer_1, 
  RGB_2_YUV_A_2,
  1};
		

		
		

		
		
		Buffer Debayer_BR_Buffer_0 {
			Debayer_BR.out[0],
	GENERIC_16,
	1284,
	16,
	2568,
	1
		};
		
		Debayer_BR_Buffer_0.readPixels = 1284;
		
	Input RGB_2_YUV_A_0 = RGB_2_YUV.A[0];
	  RGB_2_YUV_A_0.firstLine = 0;
	  RGB_2_YUV_A_0.pixels = 1280;
	  RGB_2_YUV_A_0.lineSkip = 0;
	  RGB_2_YUV_A_0.increment = 1;
	  RGB_2_YUV_A_0.pixelSkip = 0;
	  RGB_2_YUV_A_0.type = GENERIC_16;
		
		
Connect {
  Debayer_BR_Buffer_0, 
  RGB_2_YUV_A_0,
  1};
		

		
		

		
		
		Buffer Gamma_Buffer_0 {
			Gamma.out[0],
	GENERIC_16,
	1280,
	16,
	2560,
	1
		};
		
		Gamma_Buffer_0.readPixels = 1280;
		
	Input ConvertOut_A_0 = ConvertOut.A[0];
	  ConvertOut_A_0.firstLine = 0;
	  ConvertOut_A_0.pixels = 1280;
	  ConvertOut_A_0.lineSkip = 0;
	  ConvertOut_A_0.increment = 1;
	  ConvertOut_A_0.pixelSkip = 0;
	  ConvertOut_A_0.type = GENERIC_16;
		
		
Connect {
  Gamma_Buffer_0, 
  ConvertOut_A_0,
  1};
		

		
		

		
		
		Buffer RGB_2_YUV_Buffer_1 {
			RGB_2_YUV.out[1],
	GENERIC_16,
	1280,
	16,
	2560,
	1
		};
		
		RGB_2_YUV_Buffer_1.readPixels = 1280;
		
	Input ConvertOut_A_1 = ConvertOut.A[1];
	  ConvertOut_A_1.firstLine = 0;
	  ConvertOut_A_1.pixels = 1280;
	  ConvertOut_A_1.lineSkip = 0;
	  ConvertOut_A_1.increment = 1;
	  ConvertOut_A_1.pixelSkip = 0;
	  ConvertOut_A_1.type = GENERIC_16;
		
		
Connect {
  RGB_2_YUV_Buffer_1, 
  ConvertOut_A_1,
  1};
		

		
		

		
		
		Buffer RGB_2_YUV_Buffer_2 {
			RGB_2_YUV.out[2],
	GENERIC_16,
	1280,
	16,
	2560,
	1
		};
		
		RGB_2_YUV_Buffer_2.readPixels = 1280;
		
	Input ConvertOut_A_2 = ConvertOut.A[2];
	  ConvertOut_A_2.firstLine = 0;
	  ConvertOut_A_2.pixels = 1280;
	  ConvertOut_A_2.lineSkip = 0;
	  ConvertOut_A_2.increment = 1;
	  ConvertOut_A_2.pixelSkip = 0;
	  ConvertOut_A_2.type = GENERIC_16;
		
		
Connect {
  RGB_2_YUV_Buffer_2, 
  ConvertOut_A_2,
  1};
		

		
		

		
		
		Buffer RGB_2_YUV_Buffer_0 {
			RGB_2_YUV.out[0],
	GENERIC_16,
	1280,
	4,
	2560,
	1
		};
		
		RGB_2_YUV_Buffer_0.readPixels = 1280;
		
	Input Gamma_A_0 = Gamma.A[0];
	  Gamma_A_0.firstLine = 0;
	  Gamma_A_0.pixels = 1280;
	  Gamma_A_0.lineSkip = 0;
	  Gamma_A_0.increment = 1;
	  Gamma_A_0.pixelSkip = 0;
	  Gamma_A_0.type = GENERIC_16;
		
		
Connect {
  RGB_2_YUV_Buffer_0, 
  Gamma_A_0,
  1};
		

		
		
	