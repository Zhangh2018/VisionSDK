diff -urN ../../opencv_src-original/3rdparty/libjasper/CMakeLists.txt ../../opencv_src/3rdparty/libjasper/CMakeLists.txt
--- ../../opencv_src-original/3rdparty/libjasper/CMakeLists.txt	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/3rdparty/libjasper/CMakeLists.txt	2015-10-02 10:44:27.688287213 +0200
@@ -48,3 +48,7 @@
 if(NOT BUILD_SHARED_LIBS)
   ocv_install_target(${JASPER_LIBRARY} EXPORT OpenCVModules ARCHIVE DESTINATION ${OPENCV_3P_LIB_INSTALL_PATH} COMPONENT dev)
 endif()
+
+if (MULTI)
+  INSTALL (FILES ${3P_LIBRARY_OUTPUT_PATH}/lib${JASPER_LIBRARY}.dba DESTINATION ${OPENCV_3P_LIB_INSTALL_PATH})
+endif ()
diff -urN ../../opencv_src-original/3rdparty/libjasper/jasper/jas_config.h ../../opencv_src/3rdparty/libjasper/jasper/jas_config.h
--- ../../opencv_src-original/3rdparty/libjasper/jasper/jas_config.h	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/3rdparty/libjasper/jasper/jas_config.h	2015-10-02 10:45:33.319076754 +0200
@@ -89,7 +89,7 @@
 #define HAVE_UNISTD_H 1
 
 /* Have variable length arrays */
-#define HAVE_VLA 1
+//#define HAVE_VLA 0
 
 /* Define to 1 if you have the `vprintf' function. */
 #define HAVE_VPRINTF 1
@@ -149,7 +149,7 @@
 /* #undef ssize_t */
 
 /* Define to `unsigned char' if <sys/types.h> does not define. */
-#define uchar unsigned char
+/* #define uchar unsigned char */
 
 /* Define to `unsigned int' if <sys/types.h> does not define. */
 /* #undef uint */
diff -urN ../../opencv_src-original/3rdparty/libjpeg/CMakeLists.txt ../../opencv_src/3rdparty/libjpeg/CMakeLists.txt
--- ../../opencv_src-original/3rdparty/libjpeg/CMakeLists.txt	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/3rdparty/libjpeg/CMakeLists.txt	2015-10-02 10:44:27.688287213 +0200
@@ -41,3 +41,7 @@
 if(NOT BUILD_SHARED_LIBS)
   ocv_install_target(${JPEG_LIBRARY} EXPORT OpenCVModules ARCHIVE DESTINATION ${OPENCV_3P_LIB_INSTALL_PATH} COMPONENT dev)
 endif()
+
+if (MULTI)
+  INSTALL (FILES ${3P_LIBRARY_OUTPUT_PATH}/lib${JPEG_LIBRARY}.dba DESTINATION ${OPENCV_3P_LIB_INSTALL_PATH})
+endif ()
diff -urN ../../opencv_src-original/3rdparty/libpng/CMakeLists.txt ../../opencv_src/3rdparty/libpng/CMakeLists.txt
--- ../../opencv_src-original/3rdparty/libpng/CMakeLists.txt	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/3rdparty/libpng/CMakeLists.txt	2015-10-02 10:44:27.688287213 +0200
@@ -57,3 +57,7 @@
 if(NOT BUILD_SHARED_LIBS)
   ocv_install_target(${PNG_LIBRARY} EXPORT OpenCVModules ARCHIVE DESTINATION ${OPENCV_3P_LIB_INSTALL_PATH} COMPONENT dev)
 endif()
+
+if (MULTI)
+  INSTALL (FILES ${3P_LIBRARY_OUTPUT_PATH}/lib${PNG_LIBRARY}.dba DESTINATION ${OPENCV_3P_LIB_INSTALL_PATH})
+endif ()
diff -urN ../../opencv_src-original/3rdparty/libtiff/CMakeLists.txt ../../opencv_src/3rdparty/libtiff/CMakeLists.txt
--- ../../opencv_src-original/3rdparty/libtiff/CMakeLists.txt	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/3rdparty/libtiff/CMakeLists.txt	2015-10-02 10:44:27.688287213 +0200
@@ -85,6 +85,10 @@
   list(APPEND lib_srcs tif_unix.c)
 endif()
 
+if(${TARGET_OS} MATCHES INTEGRITY)
+  list(APPEND lib_srcs tif_integrity.c)
+endif()
+
 ocv_warnings_disable(CMAKE_C_FLAGS -Wno-unused-but-set-variable -Wmissing-prototypes -Wmissing-declarations -Wundef -Wunused -Wsign-compare
                                    -Wcast-align -Wshadow -Wno-maybe-uninitialized -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast)
 ocv_warnings_disable(CMAKE_C_FLAGS -Wunused-parameter) # clang
@@ -117,3 +121,7 @@
 if(NOT BUILD_SHARED_LIBS)
   ocv_install_target(${TIFF_LIBRARY} EXPORT OpenCVModules ARCHIVE DESTINATION ${OPENCV_3P_LIB_INSTALL_PATH} COMPONENT dev)
 endif()
+
+if (MULTI)
+  INSTALL (FILES ${3P_LIBRARY_OUTPUT_PATH}/lib${TIFF_LIBRARY}.dba DESTINATION ${OPENCV_3P_LIB_INSTALL_PATH})
+endif ()
diff -urN ../../opencv_src-original/3rdparty/libtiff/tif_config.h.cmakein ../../opencv_src/3rdparty/libtiff/tif_config.h.cmakein
--- ../../opencv_src-original/3rdparty/libtiff/tif_config.h.cmakein	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/3rdparty/libtiff/tif_config.h.cmakein	2015-10-02 10:44:27.688287213 +0200
@@ -36,7 +36,7 @@
 #cmakedefine HAVE_JBG_NEWLEN
 
 /* Define to 1 if you have the `mmap' function. */
-#cmakedefine HAVE_MMAP
+//#define HAVE_MMAP 0
 
 /* Define to 1 if you have the <search.h> header file. */
 #cmakedefine HAVE_SEARCH_H
diff -urN ../../opencv_src-original/3rdparty/libtiff/tif_integrity.c ../../opencv_src/3rdparty/libtiff/tif_integrity.c
--- ../../opencv_src-original/3rdparty/libtiff/tif_integrity.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../opencv_src/3rdparty/libtiff/tif_integrity.c	2015-10-02 10:44:27.688287213 +0200
@@ -0,0 +1,322 @@
+/* $Id: tif_unix.c,v 1.23 2012-06-01 21:40:59 fwarmerdam Exp $ */
+
+/*
+ * Copyright (c) 1988-1997 Sam Leffler
+ * Copyright (c) 1991-1997 Silicon Graphics, Inc.
+ *
+ * Permission to use, copy, modify, distribute, and sell this software and
+ * its documentation for any purpose is hereby granted without fee, provided
+ * that (i) the above copyright notices and this permission notice appear in
+ * all copies of the software and related documentation, and (ii) the names of
+ * Sam Leffler and Silicon Graphics may not be used in any advertising or
+ * publicity relating to the software without the specific, prior written
+ * permission of Sam Leffler and Silicon Graphics.
+ *
+ * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
+ * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+ *
+ * IN NO EVENT SHALL SAM LEFFLER OR SILICON GRAPHICS BE LIABLE FOR
+ * ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,
+ * OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
+ * WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF
+ * LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
+ * OF THIS SOFTWARE.
+ */
+
+/*
+ * TIFF Library UNIX-specific Routines. These are should also work with the
+ * Windows Common RunTime Library.
+ */
+
+#include "tif_config.h"
+
+#ifdef HAVE_SYS_TYPES_H
+# include <sys/types.h>
+#endif
+
+#include <errno.h>
+
+#include <stdarg.h>
+#include <stdlib.h>
+#include <sys/stat.h>
+
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
+
+#ifdef HAVE_FCNTL_H
+# include <fcntl.h>
+#endif
+
+#ifdef HAVE_IO_H
+# include <io.h>
+#endif
+
+#include "tiffiop.h"
+
+static tmsize_t
+_tiffReadProc(thandle_t fd, void* buf, tmsize_t size)
+{
+    size_t size_io = (size_t) size;
+    if ((tmsize_t) size_io != size)
+    {
+        errno=EINVAL;
+        return (tmsize_t) -1;
+    }
+    return ((tmsize_t) read((int) fd, buf, size_io));
+}
+
+static tmsize_t
+_tiffWriteProc(thandle_t fd, void* buf, tmsize_t size)
+{
+    size_t size_io = (size_t) size;
+    if ((tmsize_t) size_io != size)
+    {
+        errno=EINVAL;
+        return (tmsize_t) -1;
+    }
+    return ((tmsize_t) write((int) fd, buf, size_io));
+}
+
+static uint64
+_tiffSeekProc(thandle_t fd, uint64 off, int whence)
+{
+    off_t off_io = (off_t) off;
+    if ((uint64) off_io != off)
+    {
+        errno=EINVAL;
+        return (uint64) -1; /* this is really gross */
+    }
+    return((uint64)lseek((int)fd,off_io,whence));
+}
+
+static int
+_tiffCloseProc(thandle_t fd)
+{
+    return(close((int)fd));
+}
+
+static uint64
+_tiffSizeProc(thandle_t fd)
+{
+    struct stat sb;
+    if (fstat((int)fd,&sb)<0)
+        return(0);
+    else
+        return((uint64)sb.st_size);
+}
+
+#ifdef HAVE_MMAP
+#include <sys/mman.h>
+
+static int
+_tiffMapProc(thandle_t fd, void** pbase, toff_t* psize)
+{
+    uint64 size64 = _tiffSizeProc(fd);
+    tmsize_t sizem = (tmsize_t)size64;
+    if ((uint64)sizem==size64) {
+        *pbase = (void*)
+            mmap(0, (size_t)sizem, PROT_READ, MAP_SHARED, (int) fd, 0);
+        if (*pbase != (void*) -1) {
+            *psize = (tmsize_t)sizem;
+            return (1);
+        }
+    }
+    return (0);
+}
+
+static void
+_tiffUnmapProc(thandle_t fd, void* base, toff_t size)
+{
+    (void) fd;
+    (void) munmap(base, (off_t) size);
+}
+#else /* !HAVE_MMAP */
+static int
+_tiffMapProc(thandle_t fd, void** pbase, toff_t* psize)
+{
+    (void) fd; (void) pbase; (void) psize;
+    return (0);
+}
+
+static void
+_tiffUnmapProc(thandle_t fd, void* base, toff_t size)
+{
+    (void) fd; (void) base; (void) size;
+}
+#endif /* !HAVE_MMAP */
+
+/*
+ * Open a TIFF file descriptor for read/writing.
+ */
+TIFF*
+TIFFFdOpen(int fd, const char* name, const char* mode)
+{
+    TIFF* tif;
+
+    tif = TIFFClientOpen(name, mode,
+        (thandle_t) fd,
+        _tiffReadProc, _tiffWriteProc,
+        _tiffSeekProc, _tiffCloseProc, _tiffSizeProc,
+        _tiffMapProc, _tiffUnmapProc);
+    if (tif)
+        tif->tif_fd = fd;
+    return (tif);
+}
+
+/*
+ * Open a TIFF file for read/writing.
+ */
+TIFF*
+TIFFOpen(const char* name, const char* mode)
+{
+    static const char module[] = "TIFFOpen";
+    int m, fd;
+    TIFF* tif;
+
+    m = _TIFFgetMode(mode, module);
+    if (m == -1)
+        return ((TIFF*)0);
+
+/* for cygwin and mingw */
+#ifdef O_BINARY
+    m |= O_BINARY;
+#endif
+
+    fd = open(name, m, 0666);
+    if (fd < 0) {
+        if (errno > 0 && strerror(errno) != NULL ) {
+            TIFFErrorExt(0, module, "%s: %s", name, strerror(errno) );
+        } else {
+            TIFFErrorExt(0, module, "%s: Cannot open", name);
+        }
+        return ((TIFF *)0);
+    }
+
+    tif = TIFFFdOpen((int)fd, name, mode);
+    if(!tif)
+        close(fd);
+    return tif;
+}
+
+#ifdef __WIN32__
+#include <windows.h>
+/*
+ * Open a TIFF file with a Unicode filename, for read/writing.
+ */
+TIFF*
+TIFFOpenW(const wchar_t* name, const char* mode)
+{
+    static const char module[] = "TIFFOpenW";
+    int m, fd;
+    int mbsize;
+    char *mbname;
+    TIFF* tif;
+
+    m = _TIFFgetMode(mode, module);
+    if (m == -1)
+        return ((TIFF*)0);
+
+/* for cygwin and mingw */
+#ifdef O_BINARY
+    m |= O_BINARY;
+#endif
+
+    fd = _wopen(name, m, 0666);
+    if (fd < 0) {
+        TIFFErrorExt(0, module, "%s: Cannot open", name);
+        return ((TIFF *)0);
+    }
+
+    mbname = NULL;
+    mbsize = WideCharToMultiByte(CP_ACP, 0, name, -1, NULL, 0, NULL, NULL);
+    if (mbsize > 0) {
+        mbname = _TIFFmalloc(mbsize);
+        if (!mbname) {
+            TIFFErrorExt(0, module,
+            "Can't allocate space for filename conversion buffer");
+            return ((TIFF*)0);
+        }
+
+        WideCharToMultiByte(CP_ACP, 0, name, -1, mbname, mbsize,
+                    NULL, NULL);
+    }
+
+    tif = TIFFFdOpen((int)fd, (mbname != NULL) ? mbname : "<unknown>",
+             mode);
+
+    _TIFFfree(mbname);
+
+    if(!tif)
+        close(fd);
+    return tif;
+}
+#endif
+
+void*
+_TIFFmalloc(tmsize_t s)
+{
+    return (malloc((size_t) s));
+}
+
+void
+_TIFFfree(void* p)
+{
+    free(p);
+}
+
+void*
+_TIFFrealloc(void* p, tmsize_t s)
+{
+    return (realloc(p, (size_t) s));
+}
+
+void
+_TIFFmemset(void* p, int v, tmsize_t c)
+{
+    memset(p, v, (size_t) c);
+}
+
+void
+_TIFFmemcpy(void* d, const void* s, tmsize_t c)
+{
+    memcpy(d, s, (size_t) c);
+}
+
+int
+_TIFFmemcmp(const void* p1, const void* p2, tmsize_t c)
+{
+    return (memcmp(p1, p2, (size_t) c));
+}
+
+static void
+unixWarningHandler(const char* module, const char* fmt, va_list ap)
+{
+    if (module != NULL)
+        fprintf(stderr, "%s: ", module);
+    fprintf(stderr, "Warning, ");
+    vfprintf(stderr, fmt, ap);
+    fprintf(stderr, ".\n");
+}
+TIFFErrorHandler _TIFFwarningHandler = unixWarningHandler;
+
+static void
+unixErrorHandler(const char* module, const char* fmt, va_list ap)
+{
+    if (module != NULL)
+        fprintf(stderr, "%s: ", module);
+    vfprintf(stderr, fmt, ap);
+    fprintf(stderr, ".\n");
+}
+TIFFErrorHandler _TIFFerrorHandler = unixErrorHandler;
+
+/* vim: set ts=8 sts=8 sw=8 noet: */
+
+/*
+ * Local Variables:
+ * mode: c
+ * c-basic-offset: 8
+ * fill-column: 78
+ * End:
+ */
diff -urN ../../opencv_src-original/3rdparty/zlib/CMakeLists.txt ../../opencv_src/3rdparty/zlib/CMakeLists.txt
--- ../../opencv_src-original/3rdparty/zlib/CMakeLists.txt	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/3rdparty/zlib/CMakeLists.txt	2015-10-02 10:44:27.688287213 +0200
@@ -97,3 +97,8 @@
 if(NOT BUILD_SHARED_LIBS)
   ocv_install_target(${ZLIB_LIBRARY} EXPORT OpenCVModules ARCHIVE DESTINATION ${OPENCV_3P_LIB_INSTALL_PATH} COMPONENT dev)
 endif()
+
+if (MULTI)
+  INSTALL (FILES ${3P_LIBRARY_OUTPUT_PATH}/lib${ZLIB_LIBRARY}.dba DESTINATION ${OPENCV_3P_LIB_INSTALL_PATH})
+endif ()
+
diff -urN ../../opencv_src-original/cmake/OpenCVFindLibsVideo.cmake ../../opencv_src/cmake/OpenCVFindLibsVideo.cmake
--- ../../opencv_src-original/cmake/OpenCVFindLibsVideo.cmake	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/cmake/OpenCVFindLibsVideo.cmake	2015-10-02 10:44:27.692289392 +0200
@@ -183,25 +183,80 @@
 
 # --- FFMPEG ---
 ocv_clear_vars(HAVE_FFMPEG HAVE_FFMPEG_CODEC HAVE_FFMPEG_FORMAT HAVE_FFMPEG_UTIL HAVE_FFMPEG_SWSCALE HAVE_GENTOO_FFMPEG HAVE_FFMPEG_FFMPEG)
-if(WITH_FFMPEG)
+if(WITH_FFMPEG MATCHES ON)
   if(WIN32 AND NOT ARM)
     include("${OpenCV_SOURCE_DIR}/3rdparty/ffmpeg/ffmpeg_version.cmake")
   elseif(UNIX)
-    CHECK_MODULE(libavcodec HAVE_FFMPEG_CODEC)
-    CHECK_MODULE(libavformat HAVE_FFMPEG_FORMAT)
-    CHECK_MODULE(libavutil HAVE_FFMPEG_UTIL)
-    CHECK_MODULE(libswscale HAVE_FFMPEG_SWSCALE)
-
-    CHECK_INCLUDE_FILE(libavformat/avformat.h HAVE_GENTOO_FFMPEG)
-    CHECK_INCLUDE_FILE(ffmpeg/avformat.h HAVE_FFMPEG_FFMPEG)
-    if(NOT HAVE_GENTOO_FFMPEG AND NOT HAVE_FFMPEG_FFMPEG)
-      if(EXISTS /usr/include/ffmpeg/libavformat/avformat.h OR HAVE_FFMPEG_SWSCALE)
-        set(HAVE_GENTOO_FFMPEG TRUE)
+    set(HIGHGUI_LIBRARIES ${HIGHGUI_LIBRARIES} "${FFMPEG_LIB_DIR}/libavcodec.so"
+      "${FFMPEG_LIB_DIR}/libavformat.so" "${FFMPEG_LIB_DIR}/libavutil.so"
+      "${FFMPEG_LIB_DIR}/libswscale.so")
+    set(HAVE_GENTOO_FFMPEG TRUE)
+    if(EXISTS "${FFMPEG_LIB_DIR}/libavcodec.so")
+      set(HAVE_FFMPEG_CODEC TRUE)
+      set(ALIASOF_libavcodec_VERSION "Unknown")
+      if(EXISTS "${FFMPEG_LIB_DIR}/libavformat.so")
+	set(HAVE_FFMPEG_FORMAT TRUE)
+	set(ALIASOF_libavformat_VERSION "Unknown")
+	if(EXISTS "${FFMPEG_LIB_DIR}/libavutil.so")
+	  set(HAVE_FFMPEG_UTIL TRUE)
+	  set(ALIASOF_libavutil_VERSION "Unknown")
+	  if(EXISTS "${FFMPEG_LIB_DIR}/libswscale.so")
+	    set(HAVE_FFMPEG_SWSCALE TRUE)
+	    set(ALIASOF_libswscale_VERSION "Unknown")
+	    set(HAVE_FFMPEG TRUE)
+	  endif()
+	endif()
       endif()
     endif()
-    if(HAVE_FFMPEG_CODEC AND HAVE_FFMPEG_FORMAT AND HAVE_FFMPEG_UTIL AND HAVE_FFMPEG_SWSCALE)
-      set(HAVE_FFMPEG TRUE)
+    ocv_include_directories(${FFMPEG_INCLUDE_DIR})
+    
+#    CHECK_MODULE(libavcodec HAVE_FFMPEG_CODEC)
+#    CHECK_MODULE(libavformat HAVE_FFMPEG_FORMAT)
+#    CHECK_MODULE(libavutil HAVE_FFMPEG_UTIL)
+#    CHECK_MODULE(libswscale HAVE_FFMPEG_SWSCALE)
+
+#    CHECK_INCLUDE_FILE(libavformat/avformat.h HAVE_GENTOO_FFMPEG)
+#    CHECK_INCLUDE_FILE(ffmpeg/avformat.h HAVE_FFMPEG_FFMPEG)
+#    if(NOT HAVE_GENTOO_FFMPEG AND NOT HAVE_FFMPEG_FFMPEG)
+#      if(EXISTS /usr/include/ffmpeg/libavformat/avformat.h OR HAVE_FFMPEG_SWSCALE)
+#        set(HAVE_GENTOO_FFMPEG TRUE)
+#      endif()
+#    endif()
+#    if(HAVE_FFMPEG_CODEC AND HAVE_FFMPEG_FORMAT AND HAVE_FFMPEG_UTIL AND HAVE_FFMPEG_SWSCALE)
+#      set(HAVE_FFMPEG TRUE)
+#    endif()
+
+    if(HAVE_FFMPEG)
+      # Find the bzip2 library because it is required on some systems
+      FIND_LIBRARY(BZIP2_LIBRARIES NAMES bz2 bzip2)
+      if(NOT BZIP2_LIBRARIES)
+        # Do an other trial
+        FIND_FILE(BZIP2_LIBRARIES NAMES libbz2.so.1 PATHS /lib)
+      endif()
+    endif(HAVE_FFMPEG)
+  elseif(${TARGET_OS} MATCHES "INTEGRITY")  
+    set(HIGHGUI_LIBRARIES ${HIGHGUI_LIBRARIES} "${FFMPEG_LIB_DIR}/libavcodec.a"
+      "${FFMPEG_LIB_DIR}/libavformat.a" "${FFMPEG_LIB_DIR}/libavutil.a"
+      "${FFMPEG_LIB_DIR}/libswscale.a")
+    set(HAVE_GENTOO_FFMPEG TRUE)
+    if(EXISTS "${FFMPEG_LIB_DIR}/libavcodec.a")
+      set(HAVE_FFMPEG_CODEC TRUE)
+      set(ALIASOF_libavcodec_VERSION "Unknown")
+      if(EXISTS "${FFMPEG_LIB_DIR}/libavformat.a")
+	set(HAVE_FFMPEG_FORMAT TRUE)
+	set(ALIASOF_libavformat_VERSION "Unknown")
+	if(EXISTS "${FFMPEG_LIB_DIR}/libavutil.a")
+	  set(HAVE_FFMPEG_UTIL TRUE)
+	  set(ALIASOF_libavutil_VERSION "Unknown")
+	  if(EXISTS "${FFMPEG_LIB_DIR}/libswscale.a")
+	    set(HAVE_FFMPEG_SWSCALE TRUE)
+	    set(ALIASOF_libswscale_VERSION "Unknown")
+	    set(HAVE_FFMPEG TRUE)
+	  endif()
+	endif()
+      endif()
     endif()
+    ocv_include_directories(${FFMPEG_INCLUDE_DIR})
 
     if(HAVE_FFMPEG)
       # Find the bzip2 library because it is required on some systems
@@ -212,7 +267,7 @@
       endif()
     endif(HAVE_FFMPEG)
   endif()
-
+  
   if(APPLE)
     find_path(FFMPEG_INCLUDE_DIR "libavformat/avformat.h"
               PATHS /usr/local /usr /opt
diff -urN ../../opencv_src-original/cmake/OpenCVModule.cmake ../../opencv_src/cmake/OpenCVModule.cmake
--- ../../opencv_src-original/cmake/OpenCVModule.cmake	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/cmake/OpenCVModule.cmake	2015-10-02 10:44:27.692289392 +0200
@@ -621,6 +621,11 @@
     ARCHIVE DESTINATION ${OPENCV_LIB_INSTALL_PATH} COMPONENT dev
     )
 
+  # install files with debug information in case of MULTI 
+  if (MULTI)
+    install(FILES ${LIBRARY_OUTPUT_PATH}/lib${the_module}.dba DESTINATION ${OPENCV_LIB_INSTALL_PATH})
+  endif ()
+
   # only "public" headers need to be installed
   if(OPENCV_MODULE_${the_module}_HEADERS AND ";${OPENCV_MODULES_PUBLIC};" MATCHES ";${the_module};")
     foreach(hdr ${OPENCV_MODULE_${the_module}_HEADERS})
diff -urN ../../opencv_src-original/modules/core/include/opencv2/core/internal.hpp ../../opencv_src/modules/core/include/opencv2/core/internal.hpp
--- ../../opencv_src-original/modules/core/include/opencv2/core/internal.hpp	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/modules/core/include/opencv2/core/internal.hpp	2015-10-02 10:44:27.692289392 +0200
@@ -66,6 +66,10 @@
 #  include <pthread.h>
 #endif
 
+#if defined __MQX__
+#  include "mqx_os.h"
+#endif
+
 #ifdef __BORLANDC__
 #  ifndef WIN32
 #    define WIN32
diff -urN ../../opencv_src-original/modules/core/include/opencv2/core/operations.hpp ../../opencv_src/modules/core/include/opencv2/core/operations.hpp
--- ../../opencv_src-original/modules/core/include/opencv2/core/operations.hpp	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/modules/core/include/opencv2/core/operations.hpp	2015-10-02 10:44:27.692289392 +0200
@@ -3051,6 +3051,9 @@
                                                             saturate_cast<_Tp>(temp[2]), saturate_cast<_Tp>(temp[3]));
 }
 
+// declaration required by Integrity build
+template<typename _Tp> static inline FileNodeIterator& operator >> (FileNodeIterator& it, _Tp& value);
+
 static inline void read(const FileNode& node, Range& value, const Range& default_value)
 {
     Point2i temp(value.start, value.end); const Point2i default_temp = Point2i(default_value.start, default_value.end);
diff -urN ../../opencv_src-original/modules/core/src/system.cpp ../../opencv_src/modules/core/src/system.cpp
--- ../../opencv_src-original/modules/core/src/system.cpp	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/modules/core/src/system.cpp	2015-10-02 10:44:27.692289392 +0200
@@ -341,6 +341,8 @@
     return (int64)tp.tv_sec*1000000000 + tp.tv_nsec;
 #elif defined __MACH__ && defined __APPLE__
     return (int64)mach_absolute_time();
+#elif defined __INTEGRITY__
+    return 0;
 #else
     struct timeval tv;
     struct timezone tz;
@@ -517,10 +519,9 @@
         fname += "__opencv_temp.XXXXXX";
     }
 
-    const int fd = mkstemp((char*)fname.c_str());
-    if (fd == -1) return string();
-
-    close(fd);
+    const int fd = 0; //mkstemp((char*)fname.c_str());
+    if(fd == -1) return "";
+    fclose(fd);
     remove(fname.c_str());
 # endif
 
diff -urN ../../opencv_src-original/modules/features2d/src/fast_score.hpp ../../opencv_src/modules/features2d/src/fast_score.hpp
--- ../../opencv_src-original/modules/features2d/src/fast_score.hpp	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/modules/features2d/src/fast_score.hpp	2015-10-02 10:44:27.692289392 +0200
@@ -56,6 +56,13 @@
 template<int patternSize>
 int cornerScore(const uchar* ptr, const int pixel[], int threshold);
 
+template<>
+int cornerScore<16>(const uchar* ptr, const int pixel[], int threshold);
+template<>
+int cornerScore<12>(const uchar* ptr, const int pixel[], int threshold);
+template<>
+int cornerScore<8>(const uchar* ptr, const int pixel[], int threshold);
+
 class FastFeatureDetector2 : public FastFeatureDetector
 {
 public:
diff -urN ../../opencv_src-original/modules/flann/include/opencv2/flann/defines.h ../../opencv_src/modules/flann/include/opencv2/flann/defines.h
--- ../../opencv_src-original/modules/flann/include/opencv2/flann/defines.h	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/modules/flann/include/opencv2/flann/defines.h	2015-10-02 10:44:27.692289392 +0200
@@ -57,6 +57,8 @@
 #define FLANN_DEPRECATED __attribute__ ((deprecated))
 #elif defined(_MSC_VER)
 #define FLANN_DEPRECATED __declspec(deprecated)
+#elif defined (__INTEGRITY__)
+#define FLANN_DEPRECATED __attribute__ ((deprecated))
 #else
 #pragma message("WARNING: You need to implement FLANN_DEPRECATED for this compiler")
 #define FLANN_DEPRECATED
diff -urN ../../opencv_src-original/modules/legacy/include/opencv2/legacy/blobtrack.hpp ../../opencv_src/modules/legacy/include/opencv2/legacy/blobtrack.hpp
--- ../../opencv_src-original/modules/legacy/include/opencv2/legacy/blobtrack.hpp	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/modules/legacy/include/opencv2/legacy/blobtrack.hpp	2015-10-02 10:44:27.692289392 +0200
@@ -56,7 +56,7 @@
 #define strdup _strdup
 #define stricmp _stricmp
 #endif
-#elif defined __GNUC__ || defined __sun
+#elif defined __GNUC__ || defined __sun || defined __INTEGRITY__
 #define cv_stricmp strcasecmp
 #define cv_strnicmp strncasecmp
 #else
diff -urN ../../opencv_src-original/modules/ocl/include/opencv2/ocl/ocl.hpp ../../opencv_src/modules/ocl/include/opencv2/ocl/ocl.hpp
--- ../../opencv_src-original/modules/ocl/include/opencv2/ocl/ocl.hpp	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/modules/ocl/include/opencv2/ocl/ocl.hpp	2015-10-02 10:44:27.692289392 +0200
@@ -244,6 +244,34 @@
                 std::vector< std::pair<size_t, const void *> > &args,
                 int channels, int depth, const char *build_options);
 
+        /**
+         * Function executes the specified kernel from binary pre-compiled file
+         * @param clCxt OpenCL Context.
+         * @param fileName The file name and path of binary file with the kernel.
+         * @param kernelName The name of executed kernel.
+         * @param globalThreads ?
+         * @param localThreads ?
+         * @param args OpenCL function arguments.
+         * @param build_options Builder options (e.g. prepocessor defines etc.)
+         * @param finish If true, the execution is blocked until all queue is finished.
+         * @param cleanUp If true, the kernel is deleted after execution.
+         */
+        CV_EXPORTS void openCLExecuteKernelInterop(Context *clCxt ,
+                                                   string fileName, string kernelName,
+                                                   size_t globalThreads[3], size_t localThreads[3],
+                                                   std::vector< std::pair<size_t, const void *> > &args, const char *build_options,
+                                                   bool finish = true, bool cleanUp = true);
+
+        /**
+         * Function compiles the program in a file and writes it into the binary file
+         * Uses the specified context
+         * @param clCxt Context with specified device
+         * @param sourceFileName Source file name (ASCII)
+         * @param destinationFileName Destination file name (binary)
+         * @param build_options Build options to be added into compiler (e.g. preprocessor defines)
+         */
+        CV_EXPORTS void writeCLProgramIntoFile(Context *clCxt, string sourceFileName, string destinationFileName, const char *build_options);
+
         class CV_EXPORTS oclMatExpr;
         //////////////////////////////// oclMat ////////////////////////////////
         class CV_EXPORTS oclMat
diff -urN ../../opencv_src-original/modules/ocl/include/opencv2/ocl/private/util.hpp ../../opencv_src/modules/ocl/include/opencv2/ocl/private/util.hpp
--- ../../opencv_src-original/modules/ocl/include/opencv2/ocl/private/util.hpp	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/modules/ocl/include/opencv2/ocl/private/util.hpp	2015-10-02 10:44:27.692289392 +0200
@@ -124,6 +124,8 @@
 
 CV_EXPORTS cl_mem openCLMalloc(cl_context clCxt, size_t size, cl_mem_flags flags, void *host_ptr);
 
+int CV_EXPORTS savetofile(const Context *clcxt,  cl_program &program, const char *fileName);
+
 enum FLUSH_MODE
 {
     CLFINISH = 0,
diff -urN ../../opencv_src-original/modules/ocl/src/cl_operations.cpp ../../opencv_src/modules/ocl/src/cl_operations.cpp
--- ../../opencv_src-original/modules/ocl/src/cl_operations.cpp	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/modules/ocl/src/cl_operations.cpp	2015-10-02 10:44:27.692289392 +0200
@@ -545,5 +545,140 @@
     return con_struct;
 }
 
+/**
+ * Function gets the specified kernel from a binary file
+ * @param clCxt OpenCL Context
+ * @param fileName File name with path
+ * @param kernelName Kernel name to be returned
+ * @param build_options Build options (e.g. pre-processor defines etc.)
+ */
+cl_kernel openCLGetKernelFromBinary(const Context *clCxt, string fileName, string kernelName,
+	const char *build_options)
+{
+	cl_kernel kernel = NULL;
+	cl_program program ;
+	/* Check if the file is ok and read it */
+	CV_Assert(fileName.size() > 0);
+	FILE *fp = fopen(fileName.c_str(), "rb");
+	if(fp != NULL)
+	{
+		fseek(fp, 0, SEEK_END);
+		size_t binarySize = ftell(fp);
+		fseek(fp, 0, SEEK_SET);
+		char *binary = new char[binarySize];
+		CV_Assert(1 == fread(binary, binarySize, 1, fp));
+		fclose(fp);
+		cl_int status = 0;
+		/* Get the OpenCL program from binary file */
+		cl_device_id device = getClDeviceID(clCxt);
+		program = clCreateProgramWithBinary(
+		    getClContext(clCxt),
+                    1, 
+		    &device,
+                    (const size_t *)&binarySize, 
+		    (const unsigned char **)&binary,
+                    NULL, 
+		    &status);
+
+		openCLVerifyCall(status);
+#ifndef __INTEGRITY__
+		status = clBuildProgram(program, 1, &(clCxt->impl->devices[clCxt->impl->devnum]), build_options, NULL, NULL);
+#endif
+		delete[] binary;
+
+		// Assert success
+		CV_Assert(status == CL_SUCCESS);
+			// Create kernel
+		kernel = clCreateKernel(program, kernelName.c_str(), &status);
+			openCLVerifyCall(status);
+		}
+		return kernel;
+	} // openCLGetKernelFromBinary
+
+/**
+  * Function executes the specified kernel from binary pre-compiled file
+  * @param clCxt OpenCL Context.
+  * @param fileName The file name and path of binary file with the kernel.
+  * @param kernelName The name of executed kernel.
+  * @param globalThreads Number of global threads
+  * @param localThreads Number of local threads
+  * @param args OpenCL function arguments.
+  * @param build_options Builder options (e.g. prepocessor defines etc.)
+  * @param finish If true, the execution is blocked until all queue is finished.
+  * @param cleanUp If true, the kernel is deleted after execution.
+  */
+void openCLExecuteKernelInterop(Context *clCxt ,
+			  string fileName, string kernelName,
+			  size_t globalThreads[3], size_t localThreads[3],
+			  std::vector< std::pair<size_t, const void *> > &args,
+			  const char *build_options, bool finish, bool cleanUp)
+{
+	/* Get Kernel from binary file */
+	cl_kernel kernel;
+	kernel = openCLGetKernelFromBinary(clCxt, fileName, kernelName, build_options);
+	if( globalThreads != NULL)
+	{
+		if ( localThreads != NULL)
+		{
+			/* Set threads */
+			globalThreads[0] = divUp(globalThreads[0], localThreads[0]) * localThreads[0];
+			globalThreads[1] = divUp(globalThreads[1], localThreads[1]) * localThreads[1];
+			globalThreads[2] = divUp(globalThreads[2], localThreads[2]) * localThreads[2];
+			cv::ocl::openCLVerifyKernel(clCxt, kernel, localThreads);
+		}
+		/* Set all kernel arguments */
+		for(size_t i = 0; i < args.size(); i ++)
+			openCLSafeCall(clSetKernelArg(kernel, i, args[i].first, args[i].second));
+		openCLSafeCall(clEnqueueNDRangeKernel(getClCommandQueue(Context::getContext()), kernel, 3, NULL, globalThreads, localThreads, 0, NULL, NULL));
+	}
+	/* Block until all queued OCL commands are done? */
+	if(finish)
+	{
+		clFinish(getClCommandQueue(Context::getContext()));
+	}
+		/* Delete the kernel object? */
+	if(cleanUp)
+	{
+		openCLSafeCall(clReleaseKernel(kernel));
+	}
+} // openCLExecuteKernelInterop
+/**
+ * Function compiles the program in a file and writes it into the binary file
+ * Uses the specified context
+ * @param clCxt Context with specified device
+ * @param sourceFileName Source file name (ASCII)
+ * @param destinationFileName Destination file name (binary)
+ * @param build_options Build options to be added into compiler (e.g. preprocessor defines)
+ */
+void writeCLProgramIntoFile(Context *clCxt, string sourceFileName, string destinationFileName, const char *build_options)
+{
+	cl_program program ;
+	/* Check if the file is ok and read it */
+	CV_Assert(sourceFileName.size() > 0 && destinationFileName.size() > 0);
+	FILE *fp = fopen(sourceFileName.c_str(), "r");
+
+	if(fp != NULL)
+	{
+		fseek(fp, 0, SEEK_END);
+		size_t size = ftell(fp);
+		fseek(fp, 0, SEEK_SET);
+		char *source = new char[size];
+		CV_Assert(1 == fread(source, size, 1, fp));
+		fclose(fp);
+		cl_int status = 0;
+		/* Create and build the program */
+		cl_device_id device = getClDeviceID(clCxt);	
+		program = clCreateProgramWithSource(getClContext(clCxt), 1, (const char **)&source, NULL, &status);
+		openCLVerifyCall(status);
+		status = clBuildProgram(program, 1, &device, build_options, NULL, NULL);
+		/* Save into file */
+		savetofile(clCxt, program, destinationFileName.c_str());
+		delete[] source;
+		// Assert success
+		CV_Assert(status == CL_SUCCESS);
+	}
+} // writeCLProgramIntoFile
+
+
 }//namespace ocl
 }//namespace cv
diff -urN ../../opencv_src-original/modules/ts/include/opencv2/ts/ts.hpp ../../opencv_src/modules/ts/include/opencv2/ts/ts.hpp
--- ../../opencv_src-original/modules/ts/include/opencv2/ts/ts.hpp	2014-10-01 09:33:36.000000000 +0200
+++ ../../opencv_src/modules/ts/include/opencv2/ts/ts.hpp	2015-10-02 10:44:27.692289392 +0200
@@ -280,7 +280,7 @@
     double test_case_count_scale;
 };
 
-
+#undef CONSOLE
 class CV_EXPORTS TS
 {
 public:
diff -urN ../../opencv_src-original/tools/ocl/CMakeLists.txt ../../opencv_src/tools/ocl/CMakeLists.txt
--- ../../opencv_src-original/tools/ocl/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ ../../opencv_src/tools/ocl/CMakeLists.txt	2015-10-02 10:44:27.696291590 +0200
@@ -0,0 +1,4 @@
+cmake_minimum_required(VERSION 2.8)
+
+set(OpenCV_DIR $ENV{OPENCV_DIR})
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/../cmake)
